@page "/"
@inject HttpClient Http

<PageTitle>Word lookup</PageTitle>

<style>
    .wordList {
        column-count: 3;
        column-gap: 20px;
    }
    .wordList li {
        list-style: none;
        padding: 0.25em 0.5em;
        margin: 0.25em;
    }
    .wordList li:nth-of-type(odd) {
        background-color: #f6f6f6;
    }
    
</style>

<h1>Word lookup</h1>

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Enter the letters from today's <a href="https://www.nytimes.com/puzzles/spelling-bee">spelling bee</a></p>
    <label for="letters">Letters (center letter should be first):</label>
    <input name="letters" id="letters" @bind="input" />
    <button class="btn btn-primary" @onclick="Lookup">Look up words</button>
    <div class="container word-list" style="margin: 1em;">
        <div class="row">
            @{
                <ul class="wordList">
                @foreach (var word in foundWords)
                {
                    <li>@word</li>
                }
                </ul>
            }
        </div>
    </div>
    <div>
        @foundWords.Length words
    </div>
}

@code {
    private string[]? words;
    private string[] foundWords = Array.Empty<string>();
    private string input = "";

    protected override async Task OnInitializedAsync()
    {
        words = (await Http.GetStringAsync("https://raw.githubusercontent.com/kbaley/WordLookup/main/words")).Split("\n");
    }
    private void Lookup()
    {
        if (string.IsNullOrWhiteSpace(input)) {
            return;
        }
        var center = input[0];
        if (words == null) {
            return;
        }

        foundWords = words.Where(
            w => w.Contains(center) && w.All(c => input.Contains(c))).ToArray();
    }
}
